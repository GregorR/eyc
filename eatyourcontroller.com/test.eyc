Copyright (c) 2022 Gregor Richards;

license ISC (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

import basics;
alias core.*;
alias basics.*;

import /eatyourcontroller.com/assets/0x72robots/rgbiih as robots;
import /eatyourcontroller.com/assets/cotarrow/rgbiih as cota;

garment Test test.txt;

export main class Main : cota.COTAStage {
    override mutating once void init() {
        this.dw = 24;
        this.dh = 16;
        this.layout = Test;
        super();
        num w = this.w;
        num h = this.h;

        this.addSprite(cota.Forest.bg, 0, 0, -1, "");

        Gravity g = new {
            this.z = 1;
            this.gy = 0x.048;
            this.termY = 2;
            this.bbx2 = w;
            this.bby2 = h;
        };
        this.addObject(g);

        num x = 21;
        for (string nm in [
            "orange", "cyan", "red", "black", "magenta", "teal", "purple",
            "green", "yellow"
        ]) {
            Robot r = new {
                this.init(nm);
                this.x = x;
                x -= 0x1.18;
                this.vx = -0x.08;
                this.y = 6;
                this.z = 1;
                this.bbx1 = 0x.1;
                this.bbx2 = 0x.f;
                this.bby1 = 0x.1;
                this.bby2 = 0x1.f;
            };
            this.addObject(r);
        }

        SimpleMotion sm = new {
            this.x = 3;
            this.y = 10;
            this.z = 1;
            this.bbx1 = 0x.1;
            this.bbx2 = 0x.f;
            this.bby1 = 0x.1;
            this.bby2 = 0x.f;
            this.animationFrames = this.idleFrames =
                cota.Sprites.character.idle;
            this.walkFrames = cota.Sprites.character.run;
            this.initRoundedSprite(0x.2);
            this.initCOTAOutlined();
            /*
            this.walkFrames = [
                tuple(cota.Sprites : string, "character.run.1"),
                tuple(cota.Sprites : string, "character.run.2"),
                tuple(cota.Sprites : string, "character.run.3"),
                tuple(cota.Sprites : string, "character.run.4"),
                tuple(cota.Sprites : string, "character.run.5")
            ];
            */
        };
        this.addObject(sm);
        this.players = [new Player];
        this.players[0].controlling = sm;

        Console.log("Hello!");
    }

    override mutating void tick() {
        if (this.players[0].input.up)
            Console.log("UP");
        super();
    }
}

class Robot :
    AdjacencyDetector, RoundedSprite, MotileMirrorSprite, AnimatedSprite
{
    mutating this void init(string nm) {
        this.animationFrames = this.idleFrames = new {
            num len = robots.Robots.robots.orange.length;
            for (num i = 1; i <= len; i++) {
                this += tuple(robots.Robots : string,
                              "robots." + nm + "." + (i : string));
            }
        };
        this.walkFrames = new {
            num len = robots.Robots.robots.orangew.length;
            for (num i = 1; i <= 8; i++) {
                num j = i;
                if (nm == "black")
                    j = (j - 1) % 4 + 1;
                this += tuple(robots.Robots : string,
                              "robots." + nm + "w." + (j : string));
            }
        };
        this.initRoundedSprite(0x.1);
    }

    override mutating this suggestion act() {
        suggestion ret = super();
        this.nextVX = this.vx;
        return ret;
    }

    override mutating this suggestion react() {
        suggestion ret = super();

        if (this.detected("s", "solid") || this.detected("sw", "solid") ||
            this.detected("se", "solid") ||
            this.detected("n", "solid") || this.detected("nw", "solid") ||
            this.detected("ne", "solid")) {
            if (this.detected("w", "solid") && this.nextVX < 0) {
                this.vx = -this.nextVX;
            } else if (this.detected("e", "solid") && this.nextVX > 0) {
                this.vx = -this.nextVX;
            } else {
                this.vx = this.nextVX;
            }
        } else {
            this.vx = this.nextVX;
        }

        if (this.vx == 0 && this.animationFrames != this.idleFrames)
            this.animationFrames = this.idleFrames;
        else if (this.vx != 0 && this.animationFrames != this.walkFrames)
            this.animationFrames = this.walkFrames;

        return ret;
    }

/*
    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);
        /* Ignore this if we're falling (FIXME: should have a ground detector
         * instead) * /
        if (this.vy > 0.5)
            return ret;

        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[1];
            if (i.type == "solid") {
                string dir = i.dirNonMotile(0.5);
                Object wall = i.from;

                // Don't care about n/s component
                if (dir.length > 1)
                    dir = dir[1];

                if ((dir == "e" && this.vx > 0 ||
                     dir == "w" && this.vx < 0) &&
                    wall.y + wall.bby1 < this.y + this.bby2 - 0x.4 &&
                    wall.y + wall.bby2 > this.y + this.bby1 + 0x.4) {
                    // We've been blocked. Turn around.
                    return ret suggest {
                        this.setNextVX(-this.vx);
                    };
                }
            }
        }
    }
*/

    array(tuple(string, string)) idleFrames;
    array(tuple(string, string)) walkFrames;

    num nextVX;
}

class SimpleMotion :
    Playing, Motile, AdjacencyDetector, AnimatedSprite, RoundedSprite,
    MotileMirrorSprite, cota.COTAOutlined
{
    override mutating this suggestion takeInput(InputState input) {
        suggestion ret = super(input);
        this.animationSpeed = 5;
        if (input.left) {
            this.vx = -0x.3;
        } else if (input.right) {
            this.vx = 0x.3;
        } else {
            this.vx = 0;
            this.animationSpeed = 30;
        }
        if (input.south &&
            (this.detected("s", "solid") || this.detected("sw", "solid") || this.detected("se", "solid"))) {
            this.vy = -0x.58;
        }
        return ret;
    }

    override mutating this suggestion react() {
        suggestion ret = super();
        if (this.vx == 0 && this.animationFrames != this.idleFrames)
            this.animationFrames = this.idleFrames;
        else if (this.vx != 0 && this.animationFrames != this.walkFrames)
            this.animationFrames = this.walkFrames;
        return ret;
    }

    array(tuple(string, string)) idleFrames;
    array(tuple(string, string)) walkFrames;
}

/*
export main class Main : Stage {
    override mutating void init() {
        super();
        Console.log("Hello!");

        array(string) parts = [
            "wall.nesw", "wall.nw", "wall.n", "wall.ne", "wall.w", "wall.c",
            "wall.e", "wall.sw", "wall.s", "wall.se"
        ];

        string r = robots.Robots : string;
        for (num y = 0; y < this.h; y++) {
            for (num x = 0; x < this.w; ++x) {
                ObjectSprite os = new;
                os.staticSprite = tuple(r, parts[Math.floor(this.rand() * parts.length)]);
                os.x = x;
                os.y = y;
                this.addObject(os);

                if (this.rand() < 0.2) {
                    extend os : Motile;
                    Motile mos = os : Motile;
                    mos.vx = 0x0.2 * this.rand() - 0x0.1;
                    mos.vy = 0x0.2 * this.rand() - 0x0.1;
                }
            }
        }
    }
}
*/
