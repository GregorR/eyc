Copyright (c) 2020-2022 Gregor Richards;

/*
 * Basic components required for many 2D games
 */

license ISC (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

alias core.*;

/**
 * A stage for a 2D game with object-object interactions, i.e., a normal EYC
 * program.
 */
export class InteractionStage : Stage {
    /**
     * Get input state from players.
     */
    override mutating void input(array(string) input) {
        while (this.players.length < input.length)
            // FIXME: "new" should be enough, compiler bug
            this.players += new Player;
        for (num i, string inp in input)
            this.players[i].takeInput(inp);
    }

    /**
     * Perform a tick of game actions.
     */
    override mutating void tick() {
        this.tickInput();
        this.tickAct();
        this.tickInteract();
        this.tickReact();
    }

    /**
     * 1: Do player actions.
     */
    mutating void tickInput() {
        array(suggestion) sa = new;

        for (Player p in this.players)
            sa += p.controlling.takeInput(p.input);
        for (suggestion s in sa)
            this.enforce(s, null);
    }

    /**
     * 2: Do object actions.
     */
    mutating void tickAct() {
        array(suggestion) sa = new;

        for reverse (Object o in this.objects)
            sa += o.act();
        for (suggestion s in sa)
            this.enforce(s, null);
        this.tiles = new;
        for (Object o in this.objects) {
            if (!o.free)
                this.addObjectMap(o);
        }
    }

    /**
     * 3: Object-object interactions.
     */
    mutating void tickInteract() {
        // Step 1: Determine interactions
        map(Object, set(Object)) interactionsFound = new;
        map(Object, array(tuple(Interaction, Interaction))) interactions = new;
        // First, motile objects
        for (Object o1 in this.objects) {
            if (o1 is Motile) {
                Motile m = o1 : Motile;
                num bbw = Math.max(m.bbw(), 0x.1),
                    bbh = Math.max(m.bbh(), 0x.1);

                // Detect interactions in stages so the directions make sense
                num tx = m.x, ty = m.y,

                    fx = tx - m.vx,
                    fy = ty - m.vy,

                    steps = Math.max(
                        Math.ceil(Math.abs(m.vx) / 0x.1),
                        Math.ceil(Math.abs(m.vy) / 0x.1)
                    ),

                    sx = m.vx / steps, sy = m.vy / steps;

                m.x = fx;
                m.y = fy;
                for (num step = 0; step <= steps; step++) {
                    this.determineInteractions(interactionsFound,
                        interactions, m);
                    m.x += sx;
                    m.y += sy;
                }
                m.x = tx;
                m.y = ty;

            }
        }
        // Then, any non-motile objects
        for (Object o1 in this.objects) {
            if (!(o1 is Motile))
                this.determineInteractions(interactionsFound, interactions, o1);
        }

        // Step 2: Pre-interaction
        for (
            Object o, array(tuple(Interaction, Interaction)) i in interactions
        ) {
            for (tuple(Interaction, Interaction) ti in i)
                ti[0].type = o.preinteract(ti[0]);
        }

        // Step 3: Interaction
        array(suggestion) sa = new;
        for (Object o, array(tuple(Interaction, Interaction)) i in interactions)
            sa += o.interact(i);
        for reverse (suggestion s in sa)
            this.enforce(s, null);
    }

    /**
     * 4: Object reactions.
     */
    mutating void tickReact() {
        array(suggestion) sa = new;

        for reverse (Object o in this.objects)
            sa += o.react();
        for (suggestion s in sa)
            this.enforce(s, null);
    }

    /**
     * Determine the appropriate interactions for this object in this state.
     * Called repeatedly for fast-moving motile objects.
     */
    mutating void determineInteractions(
        map(Object, set(Object)) interactionsFound,
        map(Object, array(tuple(Interaction, Interaction))) interactions,
        Object o1
    ) {
        tuple(num, num, num, num) range = this.range(o1);
        num o1x1 = o1.x + o1.bbx1,
            o1x2 = o1.x + o1.bbx2,
            o1y1 = o1.y + o1.bby1,
            o1y2 = o1.y + o1.bby2;

        // Add this object to the interaction map
        if (!(o1 in interactionsFound))
            interactionsFound[o1] = new;
        if (!(o1 in interactions))
            interactions[o1] = new;
        set(Object) o1f = interactionsFound[o1];
        array(tuple(Interaction, Interaction)) o1i = interactions[o1];

        // Look for objects we interact with
        for (num y = range[0]; y <= range[1]; y++) {
            for (num x = range[2]; x <= range[3]; x++) {
                for (Object o2 in this.tiles[tuple(x, y)]) {
                    if (o1 != o2 && !o1f[o2]) {
                        num o2x1 = o2.x + o2.bbx1,
                            o2x2 = o2.x + o2.bbx2,
                            o2y1 = o2.y + o2.bby1,
                            o2y2 = o2.y + o2.bby2;

                        if ((o1.layer == o2.layer) &&
                            !(o1x2 <= o2x1 || o2x2 <= o1x1 ||
                              o1y2 <= o2y1 || o2y2 <= o1y1)) {
                            // Add o2 to the interaction map
                            if (!(o2 in interactionsFound))
                                interactionsFound[o2] = new;
                            if (!(o2 in interactions))
                                interactions[o2] = new;
                            interactionsFound[o2] += o1;
                            array(tuple(Interaction, Interaction)) o2i = interactions[o2];

                            // Add the interaction pair to the arrays
                            Interaction i1 = new {
                                this.initInteraction(o1, o2);
                            }, i2 = new {
                                this.initInteraction(o2, o1);
                            };
                            o1i += tuple(i1, i2);
                            o1f += o2;
                            o2i += tuple(i2, i1);
                        }
                    }
                }
            }
        }
    }

    /**
     * Add an object to the stage.
     */
    mutating void addObject(Object o) {
        if (o.stage != null) {
            o.stage.remObject(o);
        }
        this.objects += o;
        o.addedToStage(this);
    }

    /**
     * Add an object to the internal map used to look up interactions. Used
     * whenever the object is moved.
     */
    mutating void addObjectMap(Object o) {
        tuple(num, num, num, num) range = this.range(o);
        for (num y = range[0]; y <= range[1]; y++) {
            for (num x = range[2]; x <= range[3]; x++) {
                tuple(num, num) xy = tuple(x, y);
                if (!(xy in this.tiles))
                    this.tiles[xy] = new;
                this.tiles[xy] += o;
            }
        }
    }

    /**
     * Remove an object from this stage.
     */
    mutating void remObject(Object o) {
        this.objects -= o;
        if (o.stage == this) {
            o.removedFromStage(this);
        }
    }

    /**
     * Utility: Get the range of map tiles an object occupies.
     */
    tuple(num, num, num, num) range(Object o) {
        return tuple (
            Math.floor((o.y+o.bby1)/2),
            Math.floor((o.y+o.bby2)/2),
            Math.floor((o.x+o.bbx1)/2),
            Math.floor((o.x+o.bbx2)/2)
        );
    }

    /**
     * The total width and height of the stage in tiles.
     */
    num w = 32, h = 18;

    /**
     * Players.
     */
    array(Player) players;

    /**
     * The objects on this stage.
     */
    set(Object) objects;

    /**
     * Object locations in terms of tiles, to make collision calculations
     * easier.
     */
    map(tuple(num, num), set(Object)) tiles;
}

/**
 * An object, in the sense of a thing in 2D space.
 */
export class Object {
    /**
     * 1: Play (if this object is controlled by a player, it takes input).
     */
    mutating this suggestion takeInput(InputState input) {}

    /**
     * 2: Act. Normal, per-tick behavior.
     */
    mutating this suggestion act() {
        this.stepVXP = 0;
        this.stepVXN = 0;
        this.stepVYP = 0;
        this.stepVYN = 0;
    }

    /**
     * 3: Determine the kinds of interactions with other objects. e.g., may
     * decide to damage certain objects and ignore others.
     */
    string preinteract(Interaction interaction) {}

    /**
     * 4: Choose how to interact. Defines the results of interactions, before
     * they're actually applied.
     */
    suggestion interact(array(tuple(Interaction, Interaction)) interactions) {}

    /**
     * 5: React to interaction. This would be the time to, e.g., take damage or
     * be destroyed, or be enhanced in some way.
     */
    mutating this suggestion react() {
        this.x += this.stepVXP + this.stepVXN;
        this.y += this.stepVYP + this.stepVYN;
    }

    /**
     * Called when this object is added to a stage (usually for sprite
     * management)
     */
    mutating void addedToStage(InteractionStage stage) {
        this.stage = stage;
    }

    /**
     * Called when this object is removed from a stage (usually for sprite
     * management)
     */
    mutating void removedFromStage(InteractionStage stage) {
        this.stage = null;
    }

    /**
     * Get the *bounding box* width of this object.
     */
    num bbw() {
        return this.bbx2 - this.bbx1;
    }

    /**
     * Get the *bounding box* height of this object.
     */
    num bbh() {
        return this.bby2 - this.bby1;
    }

    /**
     * Move this object in the X axis.
     */
    mutating this void moveX(num by) {
        if (by >= 0)
            this.stepVXP = Math.max(this.stepVXP, by);
        else
            this.stepVXN = Math.min(this.stepVXN, by);
    }

    /**
     * Move this object in the Y axis.
     */
    mutating this void moveY(num by) {
        if (by >= 0)
            this.stepVYP = Math.max(this.stepVYP, by);
        else
            this.stepVYN = Math.min(this.stepVYN, by);
    }

    /**
     * Objects aren't inherently clonable, but this helper method is provided
     * for clonable objects. Don't use it in non-clonable objects!
     */
    mutating this void cloneObject(Object other) {
        this.free = other.free;
        this.x = other.x;
        this.y = other.y;
        this.bbx1 = other.bbx1;
        this.bbx2 = other.bbx2;
        this.bby1 = other.bby1;
        this.bby2 = other.bby2;
    }

    /**
     * The stage to which this object belongs.
     */
    InteractionStage stage;

    /**
     * A free object never interacts.
     */
    bool free;

    /**
     * Location of this object on the stage, and its bounding box.
     */
    num x, y, z, bbx1, bbx2 = 1, bby1, bby2 = 1;

    /**
     * Layer, used for collision (not drawing).
     */
    num layer;

    /**
     * Movement given to the object this tick, in each axis and direction.
     */
    num stepVXP, stepVXN, stepVYP, stepVYN;
}

/**
 * Objects that move with velocity.
 */
export class Motile : Object {
    /**
     * The action of a motile object is to move.
     */
    override mutating this suggestion act() {
        suggestion ret = super();
        this.x += this.vx;
        this.y += this.vy;
        this.stepAXP = 0;
        this.stepAXN = 0;
        this.stepAYP = 0;
        this.stepAYN = 0;
        return ret;
    }

    /**
     * React by applying acceleration.
     */
    override mutating this suggestion react() {
        suggestion ret = super();
        this.vx += this.stepAXP + this.stepAXN;
        this.vy += this.stepAYP + this.stepAYN;
        return ret;
    }

    /**
     * The direction of motion, one of
     * nw n ne
     *  w o e
     * sw s se
     * NOTE: This is written to avoid string manipulation and just use
     * constants.
     */
    string dir() {
        if (this.vy < 0) {
            if (this.vx < 0)
                return "nw";
            else if (this.vx > 0)
                return "ne";
            else
                return "n";
        } else if (this.vy > 0) {
            if (this.vx < 0)
                return "sw";
            else if (this.vx > 0)
                return "se";
            else
                return "s";
        } else { // vy == 0
            if (this.vx < 0)
                return "w";
            else if (this.vx > 0)
                return "e";
            else
                return "o";
        }
    }

    /**
     * Reverse of .dir(), the direction this object is coming from.
     */
    string dirRev() {
        if (this.vy < 0) {
            if (this.vx < 0)
                return "se";
            else if (this.vx > 0)
                return "sw";
            else
                return "s";
        } else if (this.vy > 0) {
            if (this.vx < 0)
                return "ne";
            else if (this.vx > 0)
                return "nw";
            else
                return "n";
        } else { // vy == 0
            if (this.vx < 0)
                return "e";
            else if (this.vx > 0)
                return "w";
            else
                return "o";
        }
    }

    /**
     * Accessor for acceleration in suggestions.
     */
    mutating this void accelerateX(num by) {
        if (by >= 0)
            this.stepAXP = Math.max(this.stepAXP, by);
        else
            this.stepAXN = Math.min(this.stepAXN, by);
    }

    /**
     * Accessor for acceleration in suggestions.
     */
    mutating this void accelerateY(num by) {
        if (by >= 0)
            this.stepAYP = Math.max(this.stepAYP, by);
        else
            this.stepAYN = Math.min(this.stepAYN, by);
    }

    /**
     * Velocity.
     */
    num vx, vy;

    /**
     * Acceleration in each direction in each axis this tick.
     */
    num stepAXP, stepAXN, stepAYP, stepAYN;
}

/**
 * An object with a sprite.
 */
export class ObjectSprite : Object {
    /**
     * React by moving into place.
     */
    override mutating this suggestion react() {
        suggestion ret = super();

        if (this.x != this.lastX || this.y != this.lastY) {
            this.lastX = this.x;
            this.lastY = this.y;
            ret = ret suggest {
                this.stage.moveSprite(
                    this.dynamicSprite, this.x + this.spriteOffsetX,
                    this.y + this.spriteOffsetY
                );
            };
        }

        tuple(string, string) ss = this.staticSprite();
        if (ss != this.lastStaticSprite) {
            this.lastStaticSprite = ss;
            ret = ret suggest {
                this.stage.updateSprite(
                    this.dynamicSprite, ss);
            };
        }

        return ret;
    }

    /**
     * When we're added to the stage, we add our sprite.
     */
    override mutating void addedToStage(InteractionStage stage) {
        super(stage);
        tuple(string, string) ss = this.lastStaticSprite = this.staticSprite();
        this.dynamicSprite = stage.addSprite(
            ss, this.x + this.spriteOffsetX, this.y + this.spriteOffsetY,
            this.z, this.spriteEx
        );
    }

    /**
     * When we're removed, we remove our sprite.
     */
    override mutating void removedFromStage(InteractionStage stage) {
        super(stage);
        stage.removeSprite(this.dynamicSprite);
    }

    /**
     * ObjectSprites aren't inherently clonable, but this helper method is
     * provided for clonable ObjectSprites.
     */
    mutating this void cloneSprite(ObjectSprite other) {
        this.cloneObject(other);
        this.spriteOffsetX = other.spriteOffsetX;
        this.spriteOffsetY = other.spriteOffsetY;
    }

    /**
     * The (static) sprite to use to display this object. Override this.
     */
    tuple(string, string) staticSprite() {
        return tuple("", "");
    }

    // The last used static sprite (for animation)
    tuple(string, string) lastStaticSprite;

    // Extra properties of the sprite
    string spriteEx;

    // The dynamic sprite currently used to display this object
    string dynamicSprite;

    // The *previous* position of this sprite
    num lastX, lastY;

    // An optional (and usually unwanted) sprite offset
    num spriteOffsetX, spriteOffsetY;
}

/**
 * An interaction (or interaction in potentia) between two objects.
 */
export class Interaction {
    /**
     * The object this interaction is being caused by and happening to. Every
     * interaction comes as a pair, with the other having from and to swapped.
     */
    Object from, to;

    /**
     * An arbitrary "type" of interaction, set by the from sprite.
     */
    string type;

    /**
     * Intermediate data used to calculate directions.
     * @private
     */
    num o1x1, o1x2, o1y1, o1y2, o2x1, o2x2, o2y1, o2y2,
        xOverlap, yOverlap;

    /**
     * Initialization. Also computes the overlap so that the direction of
     * interaction can be received later.
     */
    mutating this once void initInteraction(Object f, Object t) {
        this.from = f;
        this.to = t;

        // Information needed for overlaps
        this.o1x1 = f.x + f.bbx1;
        this.o1x2 = f.x + f.bbx2;
        this.o1y1 = f.y + f.bby1;
        this.o1y2 = f.y + f.bby2;
        this.o2x1 = t.x + t.bbx1;
        this.o2x2 = t.x + t.bbx2;
        this.o2y1 = t.y + t.bby1;
        this.o2y2 = t.y + t.bby2;

        /* Find what portion overlaps in each axis (NOTE: If one entirely
         * overlaps the other, then this gives an incorrect result, but in a
         * harmless way) */
        num w = t.bbx2 - t.bbx1;
        this.xOverlap = Math.min(
            Math.abs(this.o1x2 - this.o2x1),
            Math.abs(this.o2x2 - this.o1x1)
        ) / w;
        num h = t.bby2 - t.bby1;
        this.yOverlap = Math.min(
            Math.abs(this.o1y2 - this.o2y1),
            Math.abs(this.o2y2 - this.o1y1)
        ) / h;
    }

    /**
     * Get the direction of this interaction, one of:
     * nw n ne
     *  w o  e
     * sw s se
     *
     * Note that this is the position of *from* relative to *to*, so if the
     * direction is 'n', then from is above to. "Corner" is how much corner
     * overlap should count, e.g., how far in the corner the object has to be to
     * get nw instead of n.
     */
    string dir(num corner) {
        string rwe, rns, r;

        num o1x1 = this.o1x1,
            o1x2 = this.o1x2,
            o1y1 = this.o1y1,
            o1y2 = this.o1y2,
            o2x1 = this.o2x1,
            o2x2 = this.o2x2,
            o2y1 = this.o2y1,
            o2y2 = this.o2y2;
        num w = this.to.bbx2 - this.to.bbx1;
        num h = this.to.bby2 - this.to.bby1;

        // Find the direction of overlap in each axis
        if (o1x2 < o2x2) {
            if (o1x1 >= o2x1) {
                // Partial overlap. Is it close enough to a corner?
                if (o1x2 < o2x1 + w * corner)
                    rwe = "w";
                else if (o1x2 >= o2x1 + w - w * corner)
                    rwe = "e";
            } else
                rwe = "w";
        } else if (o1x1 >= o2x1)
            rwe = "e";
        if (o1y2 < o2y2) {
            if (o1y1 >= o2y1) {
                if (o1y2 < o2y2 + h * corner)
                    rns = "n";
                else if (o1y2 >= o2y1 + h - h * corner)
                    rns = "s";
            } else
                rns = "n";
        } else if (o1y1 >= o2y1)
            rns = "s";

        // Choose which parts we care about
        if ((this.xOverlap < corner && this.yOverlap < corner) ||
            (this.xOverlap >= corner && this.yOverlap >= corner)) {
            // Corner or huge overlap
            r = rns + rwe;
        } else if (this.xOverlap >= corner) {
            // Overlap in the X axis = touched in the Y axis
            r = rns;
        } else { // yOverlap >= corner
            // Overlap in the Y axis = touched in the X axis
            r = rwe;
        }

        // Now check if it was a central/all over overlap
        if (r == "")
            r = "o";

        return r;
    }
}

/**
 * A player. Really just used to interact with the frontend.
 */
export class Player {
    /**
     * Each tick, we receive input from the player.
     */
    mutating this void takeInput(string inp) {
        this.input = new {
            this.initInputState(inp);
        };
    }

    Playing controlling;
    InputState input;
}

/**
 * Objects currently being played.
 */
export class Playing : Object {
    Player controlledBy;
}

/**
 * State of input, as booleans for whether each controller button is pressed as
 * well as a set of pressed buttons.
 */
export class InputState {
    /**
     * Turn this input into press info.
     */
    mutating this once void initInputState(string inp) {
        this.pressed = new {
            for (string i in inp)
                this += i;
        };
        for (string i in inp) {
            if (i == "u")
                this.up = true;
            else if (i == "d")
                this.down = true;
            else if (i == "l")
                this.left = true;
            else if (i == "r")
                this.right = true;
            else if (i == "n")
                this.north = true;
            else if (i == "s")
                this.south = true;
            else if (i == "e")
                this.east = true;
            else if (i == "w")
                this.west = true;
        }
    }

    set(string) pressed;
    bool up, down, left, right, north, south, east, west;
}

// Explicitly immobile things (such as gravity)
export class Immobile : Object {
    override mutating this suggestion react() {
        // Force our stepwise motion to be nil
        this.stepVXP = this.stepVXN =
            this.stepVYP = this.stepVYN = 0;
        return super();
    }
}

/* Gravity is simply an object over the whole map (or any subarea that has
 * gravity) */
export class Gravity : Immobile {
    // Gravity has its own special name
    override string preinteract(Interaction interaction) {
        super(interaction);
        return "gravity";
    }

    // Interact by accelearting everything
    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);

        num signGX = Math.sign(this.gx);
        num signGY = Math.sign(this.gy);
        num absGX = this.gx * signGX;
        num absGY = this.gy * signGY;
        num absTX = this.termX * signGX;
        num absTY = this.termY * signGY;
        if (absTX <= 0) absTX = 1/0;
        if (absTY <= 0) absTY = 1/0;

        for (tuple(Interaction, Interaction) ip in interactions) {
            Motile o = ip[0].to : Motile;
            if (o is Motile) {
                num absOX = o.vx * signGX;
                num absOY = o.vy * signGY;

                if (absGX != 0) {
                    if (absOX >= absTX - absGX) {
                        ret = ret suggest {
                            o.accelerateX(this.termX - o.vx);
                        };
                    } else {
                        ret = ret suggest {
                            o.accelerateX(this.gx);
                        };
                    }
                }

                if (absGY != 0) {
                    if (absOY >= absTY - absGY) {
                        ret = ret suggest {
                            o.accelerateY(this.termY - o.vy);
                        };
                    } else {
                        ret = ret suggest {
                            o.accelerateY(this.gy);
                        };
                    }
                }
            }
        }

        return ret;
    }

    // Gravity (in both x and y directions)
    num gx, gy;

    // Terminal velocity
    num termX, termY;
}

// Impassable walls
export class Wall : ObjectSprite {
    // Set blocking based on a string
    mutating this void setBlocking(string blocking) {
        this.blocking = new {
            if (blocking == "") {
                // All directions
                this += "n";
                this += "e";
                this += "s";
                this += "w";
            } else {
                for (string b in blocking)
                    this += b;
            }
        };
    }

    mutating this void initWall(string blocking) {
        this.setBlocking(blocking);
        this.bbx1 = 0;
        this.bbx2 = 1;
        this.bby1 = 0;
        this.bby2 = 1;
    }

    // Walls are solid
    override string preinteract(Interaction interaction) {
        super(interaction);
        return "solid";
    }

    // Interaction = "get outta my way!"
    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);
        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[1];
            Motile other = i.from : Motile;
            string dir = i.dir(0x.2);
            if (this.preferEW)
                dir = dir[dir.length-1];
            else
                dir = dir[0];

            // Bump them in the appropriate direction
            if (this.blocking[dir]) {
                if (dir == "n") {
                    ret = ret suggest {
                        other.moveY(this.y + this.bby1 - other.bby2 - other.y);
                        other.accelerateY(-other.vy);
                    };

                } else if (dir == "e") {
                    ret = ret suggest {
                        other.moveX(this.x + this.bbx2 - other.bbx1 - other.x);
                        other.accelerateX(-other.vx);
                    };

                } else if (dir == "s") {
                    ret = ret suggest {
                        other.moveY(this.y + this.bby2 - other.bby1 - other.y);
                        other.accelerateY(-other.vy);
                    };

                } else if (dir == "w") {
                    ret = ret suggest {
                        other.moveX(this.x + this.bbx1 - other.bbx2 - other.x);
                        other.accelerateX(-other.vx);
                    };

                }
            }
        }
        return ret;
    }

    // Directions that this wall is meant to block
    set(string) blocking;

    // If set, prefer to block east-west instead of (default) north-south
    bool preferEW;
}

/* Walls where the sprite is defined differently based on the blocking
 * direction(s) */
export class MultiWall : Wall {
    mutating this void initMultiWall(string blocking) {
        this.initWall(blocking);
        this.multiWallStaticSprite = this.getSprite(blocking);
    }

    // Override this
    tuple(string, string) getSprite(string blocking) {
        return tuple("", "");
    }

    override tuple(string, string) staticSprite() {
        return this.multiWallStaticSprite;
    }

    tuple(string, string) multiWallStaticSprite;
}

// Objects capable of detecting surrounding objects
export class AdjacencyDetector : Object {
    override mutating this suggestion act() {
        suggestion ret = super();

        // FIXME: Detect if our width or height changes
        num w = this.bbx2 - this.bbx1,
            h = this.bby2 - this.bby1,
            hw = w / 2,
            hh = h / 2,
            qw = hw / 2,
            qh = hh / 2;

        if (!this.detectors) {
            // Set up our detectors
            AdjacencyDetector self = this;

            this.detectors = new {
                // N
                this += new AdjacencyDetectorPart {
                    this.init("n", self.z, hw, 0x.1);
                };
                // NE
                this += new AdjacencyDetectorPart {
                    this.init("ne", self.z, 0x.1, 0x.1);
                };
                // E
                this += new AdjacencyDetectorPart {
                    this.init("e", self.z, 0x.1, hh);
                };
                // SE
                this += new AdjacencyDetectorPart {
                    this.init("se", self.z, 0x.1, 0x.1);
                };
                // S
                this += new AdjacencyDetectorPart {
                    this.init("s", self.z, hw, 0x.1);
                };
                // SW
                this += new AdjacencyDetectorPart {
                    this.init("sw", self.z, 0x.1, 0x.1);
                };
                // W
                this += new AdjacencyDetectorPart {
                    this.init("w", self.z, 0x.1, hh);
                };
                // NW
                this += new AdjacencyDetectorPart {
                    this.init("nw", self.z, 0x.1, 0x.1);
                };
            };

            // Get them by direction
            this.detectorsByDir = new {
                this["n"] = self.detectors[0];
                this["ne"] = self.detectors[1];
                this["e"] = self.detectors[2];
                this["se"] = self.detectors[3];
                this["s"] = self.detectors[4];
                this["sw"] = self.detectors[5];
                this["w"] = self.detectors[6];
                this["nw"] = self.detectors[7];
            };

            // Add them to the stage
            for (AdjacencyDetectorPart ad in this.detectors) {
                ret = ret suggest {
                    this.stage.addObject(ad);
                };
            }
            // FIXME: remove them when this object is removed
        }

        // Move our detectors into place
        array(AdjacencyDetectorPart) add = this.detectors;
        return ret suggest {
            // N
            add[0].detectorSetX(this.x + this.bbx1 + qw);
            add[0].detectorSetY(this.y + this.bby1 - 0x.1);
            // NE
            add[1].detectorSetX(this.x + this.bbx2);
            add[1].detectorSetY(this.y + this.bby1 - 0x.1);
            // E
            add[2].detectorSetX(this.x + this.bbx2);
            add[2].detectorSetY(this.y + this.bby1 + qh);
            // SE
            add[3].detectorSetX(this.x + this.bbx2);
            add[3].detectorSetY(this.y + this.bby2);
            // S
            add[4].detectorSetX(this.x + this.bbx1 + qw);
            add[4].detectorSetY(this.y + this.bby2);
            // SW
            add[5].detectorSetX(this.x + this.bbx1 - 0x.1);
            add[5].detectorSetY(this.y + this.bby2);
            // W
            add[6].detectorSetX(this.x + this.bbx1 - 0x.1);
            add[6].detectorSetY(this.y + this.bby1 + qh);
            // NW
            add[7].detectorSetX(this.x + this.bbx1 - 0x.1);
            add[7].detectorSetY(this.y + this.bby1 - 0x.1);
        };
    }

    // Determine what we've detected
    bool detected(string dir, string type) {
        return this.detectorsByDir[dir].detected[type];
    }

    array(AdjacencyDetectorPart) detectors = null;
    map(string, AdjacencyDetectorPart) detectorsByDir;
}

// Helper class for AdjacencyDetector
class AdjacencyDetectorPart : Object {
    mutating this void init(string dir, num z, num w, num h) {
        this.dir = dir;
        this.z = z;
        this.bbx2 = w;
        this.bby2 = h;
    }

    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);
        set(string) detected = new {
            // Add everything we detect
            for (tuple(Interaction, Interaction) ip in interactions) {
                string type = ip[1].type;
                if (type != "")
                    this += type;
            }
        };

        // Suggestion is to update it
        return ret suggest {
            this.setDetected(detected);
        };
    }

    // Internal
    mutating this void setDetected(set(string) to) {
        this.detected = to;
    }

    mutating this void detectorSetX(num to) {
        this.x = to;
    }

    mutating this void detectorSetY(num to) {
        this.y = to;
    }

    string dir;
    set(string) detected;
}

// Animated objects
export class AnimatedSprite : ObjectSprite {
    // Choose based on the frame
    override tuple(string, string) staticSprite() {
        return this.animationFrames[
            Math.floor(this.ts() / this.animationSpeed) %
            this.animationFrames.length
        ];
    }

    // Animation frames
    array(tuple(string, string)) animationFrames;

    // Speed of the animation in game frames per animation frame
    num animationSpeed = 8;
}

// Objects with sprites that mirror based on their most recent velocity
export class MirrorSprite : Motile, ObjectSprite {
    // React by mirroring
    override mutating this suggestion react() {
        suggestion ret = super();

        if (this.vx > 0 && this.mirrored) {
            this.mirrored = false;
            ret = ret suggest {
                this.stage.mirrorSprite(this.dynamicSprite, false, false);
            };

        } else if (this.vx < 0 && !this.mirrored) {
            this.mirrored = true;
            ret = ret suggest {
                this.stage.mirrorSprite(this.dynamicSprite, true, false);
            };

        }

        return ret;
    }

    // Whether the sprite is currently mirrored
    bool mirrored;
}

/* Object factory based on label and surrounding sprite labels, used by
 * fabric-based stages. Override this for your particular family of sprites.
 * context is of the form [nw, n, ne, w, self, e, sw, s, se] */
export class ObjectContextFactory {
    mutating this Object get(
        string label, array(string) layer, num x, num y
    ) {
        return null;
    }
}

/* A simple data type indicating damage that an object should in some way react
 * to */
export class Damage {
    mutating this void init(Object from, string type, num amount) {
        this.from = from;
        this.type = type;
        this.amount = amount;
    }

    Object from;
    string type;
    num amount;
}

// A damageable object
export class Damageable : Object {
    array(Damage) damage;

    // Call this to indicate that the object should receive damage
    mutating void takeDamage(Damage damage) {
        this.damage += damage;
    }

    // Override this to handle the damage received in this frame
    mutating this suggestion handleDamage(array(Damage) damage) {}

    override mutating this suggestion react() {
        suggestion ret = super() + this.handleDamage(this.damage);
        this.damage = new;
        return ret;
    }
}

// Stages defined by garments
export class GarmentStage : InteractionStage {
    // Initialize the mapping (override this)
    mutating void initMapping() {}

    /* Initialize by loading a garment. Make sure you call this BEFORE super()
     * while doing init */
    override mutating once void init() {
        // First, figure out the width and height of the layout
        this.w = this.layout[0][0].length;
        this.h = this.layout[0].length;

        // Initialize the stage
        super();

        // Load in the mapping
        this.initMapping();

        // Now add the objects
        for (num z, array(string) layer in this.layout) {
            for (num y, string row in layer) {
                for (num x, string el in row) {
                    ObjectContextFactory ocf = this.mapping[el];
                    if (ocf != null) {
                        Object o = ocf.get(el, layer, x, y);
                        if (o != null) {
                            o.x = x;
                            o.y = y;
                            o.z = this.layout.length - z;
                            this.addObject(o);
                        }
                    }
                }
            }
        }
    }

    // The mapping of fabric characters to objects
    map(string, ObjectContextFactory) mapping;

    // The garment, to be set by some subclass
    array(array(string)) layout;
}
