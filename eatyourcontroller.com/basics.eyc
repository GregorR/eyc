Copyright (c) 2020-2022 Gregor Richards;

/*
 * Basic components required for many 2D games
 */

license ISC (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

alias core.*;

/* Gravity is simply an object over the whole map (or any subarea that has
 * gravity) */
export class Gravity : Object {
    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);

        num signGX = Math.sign(this.gx);
        num signGY = Math.sign(this.gy);
        num absGX = this.gx * signGX;
        num absGY = this.gy * signGY;
        num absTX = this.termx * signGX;
        num absTY = this.termy * signGY;
        if (absTX <= 0) absTX = 1/0;
        if (absTY <= 0) absTY = 1/0;

        for (tuple(Interaction, Interaction) ip in interactions) {
            Motile o = ip[0].to : Motile;
            if (o is Motile) {
                num absOX = o.vx * signGX;
                num absOY = o.vy * signGY;

                if (absGX != 0) {
                    if (absOX >= absTX - absGX) {
                        ret = ret suggest {
                            o.accelerateX(this.termx - o.vx);
                        };
                    } else {
                        ret = ret suggest {
                            o.accelerateX(this.gx);
                        };
                    }
                }

                if (absGY != 0) {
                    if (absOY >= absTY - absGY) {
                        ret = ret suggest {
                            o.accelerateY(this.termy - o.vy);
                        };
                    } else {
                        ret = ret suggest {
                            o.accelerateY(this.gy);
                        };
                    }
                }
            }
        }

        return ret;
    }

    // Gravity (in both x and y directions)
    num gx, gy;

    // Terminal velocity
    num termx, termy;
}

// Impassable walls
export class Wall : ObjectSprite {
    // Set blocking based on a string
    mutating this void setBlocking(string blocking) {
        this.blocking = new {
            if (blocking == "") {
                // All directions
                this += "n";
                this += "e";
                this += "s";
                this += "w";
            } else {
                for (string b in blocking)
                    this += b;
            }
        };
    }

    mutating this void init(string blocking) {
        this.setBlocking(blocking);
        this.bbx1 = 0;
        this.bbx2 = 1;
        this.bby1 = 0;
        this.bby2 = 1;
    }

    // Walls are solid
    override string preinteract(Interaction interaction) {
        super(interaction);
        return "solid";
    }

    // Interaction = "get outta my way!"
    override suggestion interact(
        array(tuple(Interaction, Interaction)) interactions
    ) {
        suggestion ret = super(interactions);
        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[1];
            Motile other = i.from : Motile;
            string dirs = i.dir(0x.4);

            // Bump them in the appropriate direction(s)
            for (string dir in dirs) {
                if (this.blocking[dir]) {
                    if (dir == "n") {
                        ret = ret suggest {
                            other.minY(this.y + this.bby1 - other.bby2);
                            other.stopY();
                        };

                    } else if (dir == "e") {
                        ret = ret suggest {
                            other.maxX(this.x + this.bbx2 - other.bbx1);
                            other.stopX();
                        };

                    } else if (dir == "s") {
                        ret = ret suggest {
                            other.maxY(this.y + this.bbx2 - other.bbx1);
                            other.stopY();
                        };

                    } else if (dir == "w") {
                        ret = ret suggest {
                            other.minX(this.x + this.bbx1 - other.bbx2);
                            other.stopX();
                        };

                    }
                }
            }
        }
        return ret;
    }

    // Directions that this wall is meant to block
    set(string) blocking;
}

/* N-way walls are similar to walls, but only prevent movement of motile
 * objects, and only if they're moving in the wall's blocking direction */
export class NWayWall : Wall {
    // Check for momentum before blocking
    override suggestion interact(array(tuple(Interaction, Interaction)) interactions) {
        suggestion ret = super(interactions);
        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[1];
            Motile other = i.from : Motile;
            if (other is Motile) {
                string dirs = i.dir(0x.4);

                // Bump them in the appropriate direction(s)
                for (string dir in dirs) {
                    if (this.blocking[dir]) {
                        if (dir == "n" && other.vy > 0) {
                            ret = ret suggest {
                                other.minY(this.y + this.bby1 - other.bby2);
                                other.stopY();
                            };

                        } else if (dir == "e" && other.vx < 0) {
                            ret = ret suggest {
                                other.maxX(this.x + this.bbx2 - other.bbx1);
                                other.stopX();
                            };

                        } else if (dir == "s" && other.vy < 0) {
                            ret = ret suggest {
                                other.maxY(this.y + this.bbx2 - other.bbx1);
                                other.stopY();
                            };

                        } else if (dir == "w" && other.vx > 0) {
                            ret = ret suggest {
                                other.minX(this.x + this.bbx1 - other.bbx2);
                                other.stopX();
                            };

                        }
                    }
                }
            }
        }
        return ret;
    }
}

/* Walls where the sprite is defined differently based on the blocking
 * direction(s) */
export class MultiWall : Wall {
    mutating this void initMultiWall(string blocking) {
        this.init(blocking);
        this.multiWallStaticSprite = this.getSprite(blocking);
    }

    // Override this
    tuple(string, string) getSprite(string blocking) {
        return tuple("", "");
    }

    override tuple(string, string) staticSprite() {
        return this.multiWallStaticSprite;
    }

    tuple(string, string) multiWallStaticSprite;
}

// Animated objects
export class AnimatedSprite : ObjectSprite {
    // Choose based on the frame
    override tuple(string, string) staticSprite() {
        return this.animationFrames[
            Math.floor(this.ts() / this.animationSpeed) %
            this.animationFrames.length
        ];
    }

    // Animation frames
    array(tuple(string, string)) animationFrames;

    // Speed of the animation in game frames per animation frame
    num animationSpeed = 8;
}

// Objects with sprites that mirror based on their most recent velocity
export class MirrorSprite : Motile, ObjectSprite {
    // React by mirroring
    override mutating this suggestion react() {
        suggestion ret = super();

        if (this.vx > 0 && this.mirrored) {
            this.mirrored = false;
            ret = ret suggest {
                this.stage.mirrorSprite(this.dynamicSprite, false, false);
            };

        } else if (this.vx < 0 && !this.mirrored) {
            this.mirrored = true;
            ret = ret suggest {
                this.stage.mirrorSprite(this.dynamicSprite, true, false);
            };

        }

        return ret;
    }

    // Whether the sprite is currently mirrored
    bool mirrored;
}

/* Object factory based on label and surrounding sprite labels, used by
 * fabric-based stages. Override this for your particular family of sprites.
 * context is of the form [nw, n, ne, w, self, e, sw, s, se] */
export class ObjectContextFactory {
    mutating this Object get(
        string label, array(string) layer, num x, num y
    ) {
        return null;
    }
}

/* A simple data type indicating damage that an object should in some way react
 * to */
export class Damage {
    mutating this void init(Object from, string type, num amount) {
        this.from = from;
        this.type = type;
        this.amount = amount;
    }

    Object from;
    string type;
    num amount;
}

// A damageable object
export class Damageable : Object {
    array(Damage) damage;

    // Call this to indicate that the object should receive damage
    mutating void takeDamage(Damage damage) {
        this.damage += damage;
    }

    // Override this to handle the damage received in this frame
    mutating this suggestion handleDamage(array(Damage) damage) {}

    override mutating this suggestion react() {
        suggestion ret = super() + this.handleDamage(this.damage);
        this.damage = new;
        return ret;
    }
}

// Stages defined by garments
export class GarmentStage : Stage {
    // Initialize the mapping (override this)
    mutating void initMapping() {}

    /* Initialize by loading a garment. Make sure you call this BEFORE super()
     * while doing init */
    override mutating void init() {
        // First, figure out the width and height of the layout
        this.w = this.layout[0][0].length;
        this.h = this.layout[0].length;

        // Initialize the stage
        super();

        // Load in the mapping
        this.initMapping();

        // Now add the objects
        for (num z, array(string) layer in this.layout) {
            for (num y, string row in layer) {
                for (num x, string el in row) {
                    ObjectContextFactory ocf = this.mapping[el];
                    if (ocf != null) {
                        Object o = ocf.get(el, layer, x, y);
                        if (o != null) {
                            o.x = x;
                            o.y = y;
                            o.z = this.layout.length - z;
                            this.addObject(o);
                        }
                    }
                }
            }
        }
    }

    // The mapping of fabric characters to objects
    map(string, ObjectContextFactory) mapping;

    // The garment, to be set by some subclass
    array(array(string)) layout;
}
