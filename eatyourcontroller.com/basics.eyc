Copyright (c) 2020, 2021 Gregor Richards;

/*
 * Basic components required for many 2D games
 */

license (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

alias core.*;

// Objects that move with velocity
export class Motile : Object {
    override mutating this suggestion act() {
        suggestion ret = super();
        this.x += this.vx;
        this.y += this.vy;
        return ret;
    }

    mutating this void accelerateX(num by) {
        this.vx += by;
    }

    mutating this void accelerateY(num by) {
        this.vy += by;
    }

    num vx, vy;
}

// Impassable walls
export class Wall : ObjectSprite {
    // Set blocking based on a string
    mutating this void setBlocking(string blocking) {
        this.blocking = new {
            if (blocking == "") {
                // All directions
                this["n"] = this["s"] = this["e"] = this["w"] = true;
            } else {
                for (string b in blocking)
                    this[b] = true;
            }
        };
    }

    mutating this void init(string sprite, string blocking) {
        this.staticSprite = sprite;
        this.setBlocking(blocking);
        this.bbx1 = 0;
        this.bbx2 = 1;
        this.bby1 = 0;
        this.bby2 = 1;
    }

    // Walls are solid
    override string preinteract(Interaction interaction) {
        super(interaction);
        return "solid";
    }

    // Interaction = "get outta my way!"
    override suggestion interact(array(tuple(Interaction, Interaction)) interactions) {
        suggestion ret = super(interactions);
        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[0];
            Motile other = i.from : Motile;
            string dirs = i.dir(0x.4);

            // Bump them in the appropriate direction(s)
            for (string dir in dirs) {
                if (this.blocking[dir]) {
                    if (dir == "n") {
                        num over = this.y + this.bby1 - other.y - other.bby2;
                        ret = ret suggest {
                            other.moveY(-over);
                            other.accelerateY(-other.vy);
                        };

                    } else if (dir == "e") {
                        num over = other.x + other.bbx1 - this.x - this.bbx2;
                        ret = ret suggest {
                            other.moveX(over);
                            other.accelerateX(-other.vx);
                        };

                    } else if (dir == "s") {
                        num over = other.y + other.bby1 - this.y - this.bby2;
                        ret = ret suggest {
                            other.moveY(over);
                            other.accelerateY(-other.vy);
                        };

                    } else if (dir == "w") {
                        num over = this.x + this.bbx1 - other.x - other.bbx2;
                        ret = ret suggest {
                            other.moveX(-over);
                            other.accelerateX(-other.vx);
                        };

                    }
                }
            }
        }
        return ret;
    }

    // Directions that this wall is meant to block
    set(string) blocking;
}

/* N-way walls are similar to walls, but only prevent movement of motile
 * objects, and only if they're moving in the wall's blocking direction */
export class NWayWall : Wall {
    // Check for momentum before blocking
    override suggestion interact(array(tuple(Interaction, Interaction)) interactions) {
        suggestion ret = super(interactions);
        for (tuple(Interaction, Interaction) ip in interactions) {
            Interaction i = ip[0];
            Motile other = i.from : Motile;
            if (other is Motile) {
                string dirs = i.dir(0x.4);

                // Bump them in the appropriate direction(s)
                for (string dir in dirs) {
                    if (this.blocking[dir]) {
                        if (dir == "n" && other.vy > 0) {
                            num over = this.y + this.bby1 - other.y - other.bby2;
                            ret = ret suggest {
                                other.moveY(-over);
                                other.accelerateY(-other.vy);
                            };

                        } else if (dir == "e" && other.vx < 0) {
                            num over = other.x + other.bbx1 - this.x - this.bbx2;
                            ret = ret suggest {
                                other.moveX(over);
                                other.accelerateX(-other.vx);
                            };

                        } else if (dir == "s" && other.vy < 0) {
                            num over = other.y + other.bby1 - this.y - this.bby2;
                            ret = ret suggest {
                                other.moveY(over);
                                other.accelerateY(-other.vy);
                            };

                        } else if (dir == "w" && other.vx > 0) {
                            num over = this.x + this.bbx1 - other.x - other.bbx2;
                            ret = ret suggest {
                                other.moveX(-over);
                                other.accelerateX(-other.vx);
                            };

                        }
                    }
                }
            }
        }
        return ret;
    }
}

// Non-interactive background sprites
export class Background : ObjectSprite {
    mutating this void init(string sprite) {
        this.staticSprite = sprite;
    }
}

/* A simple data type indicating damage that an object should in some way react
 * to */
export class Damage {
    mutating this void init(Object from, string type, num amount) {
        this.from = from;
        this.type = type;
        this.amount = amount;
    }

    Object from;
    string type;
    num amount;
}

// A damageable object
export class Damageable : Object {
    array(Damage) damage;

    // Call this to indicate that the object should receive damage
    mutating void takeDamage(Damage damage) {
        this.damage += damage;
    }

    // Override this to handle the damage received in this frame
    mutating this suggestion handleDamage(array(Damage) damage) {}

    override mutating this suggestion react() {
        suggestion ret = super() + this.handleDamage(this.damage);
        this.damage = new;
        return ret;
    }
}

// Stages defined by garments
export class GarmentStage : Stage {
    // Initialize the mapping (override this)
    mutating void initMapping() {}

    // Initialize by loading a garment
    mutating void initGarment(array(array(string)) layout) {
        // First, figure out the width and height of the layout
        this.w = layout[0][0].length;
        this.h = layout[0].length;
        this.init();

        // Now add the objects
        for (num z, array(string) layer in layout) {
            for (num y, string row in layer) {
                for (num x, string el in row) {
                    Object o = this.mapping[el];
                    if (o != null) {
                        o = Serialize.clone(o) : Object;
                        o.x = x;
                        o.y = y;
                        o.z = layout.length - z;
                        this.addObject(o);
                    }
                }
            }
        }
    }

    // The mapping of fabric characters to objects
    map(string, Object) mapping;
}
