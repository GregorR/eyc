Copyright (c) 2020, 2021 Gregor Richards;

/*
 * Basic components required for many 2D games
 */

license (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

import core;
alias core.*;

// Objects that move with velocity
export class Motile : Object {
    override mutating this suggestion act() {
        suggestion ret = super();
        this.x += this.vx;
        this.y += this.vy;
        return ret;
    }

    num vx, vy;
}

/* A simple data type indicating damage that an object should in some way react
 * to */
export class Damage {
    void init(Object from, string type, num amount) {
        this.from = from;
        this.type = type;
        this.amount = amount;
    }

    Object from;
    string type;
    num amount;
}

// A damageable object
export class Damageable extends Object {
    array(Damage) damage;

    // Call this to indicate that the object should receive damage
    mutating void takeDamage(Damage damage) {
        this.damage += damage;
    }

    // Override this to handle the damage received in this frame
    mutating this suggestion handleDamage(array(Damage) damage) {}

    mutating this suggestion react() {
        suggestion ret = this.handleDamage(this.damage);
        this.damage = new;
        return ret;
    }
}
