Copyright (c) 2019 Egor Dorichev and Rami Sabbagh;
license CC-BY-NC-SA-4.0 (
Source: https://github.com/egordorichev/CurseOfTheArrow

This work licensed under a Creative Commons Attribution-NonCommercial-ShareAlike
4.0 International License (https://creativecommons.org/licenses/by-nc-sa/4.0/)

This version was modified by Gregor Richards to use the RGBIIH palette. These
modifications are not creative and therefore do not fall under copyright.
If any copyright is claimed, Gregor Richards also licenses these changes under
CC-BY-NC-SA-4.0.

This file was written by Gregor Richards. It is simply an index, is not
creative, and thus does not fall under copyright. If any copyright is claimed,
Gregor Richards also licenses it under CC-BY-NC-SA-4.0.
);

/* THIS FILE IS GENERATED BY M4. Make sure you modify the m4 file, not the
 * generated file! */
changequote(`[[', `]]')

import /eatyourcontroller.com/basics;

alias core.*;
alias basics.*;

define([[spritesheet]], [[
export sprites $1 $2 {
    default (scale=8$3);

    dirt {
        nw (0, 0);
        n; ne;
        w (0, 1);
        c; e;
        sw (0, 2);
        s; se;
        cnw (1, 4);
        cne;
        cse (0, 5);
        csw;
    }

    character {
        idle (0, 9, frames=2);
        run (0, 7, frames=5);
    }
}
]])

spritesheet([[Sprites]], [["rgbiih.png"]], [[]])
spritesheet([[Outlines]], [["rgbiih-outline.png"]],
            [[, multX=10, multY=10]])

define([[spritebg]], [[
export sprites $1 $2 {
    bg (0, 0, 24, 16, scale=8);
}
]])

spritebg([[Forest]], [["rgbiih-forest.png"]])

export class COTAOutline : ShadowSpriteOffset {
    override tuple(string, string) staticSprite() {
        ObjectSprite s = this.shadowed : ObjectSprite;
        tuple(string, string) sss = s.staticSprite();
        return tuple(Outlines : string, sss[1]);
    }

    override tuple(bool, bool) mirror() {
        return (this.shadowed : ObjectSprite).mirror();
    }
}

export class COTAOutlined : Shadowed {
    mutating this void initCOTAOutlined() {
        COTAOutlined self = this;

        COTAOutline o = new {
            this.shadowed = self;
            this.free = true;
            this.shadowX = tuple(-0x.2, 0, 0);
            this.shadowY = tuple(-0x.2, 0, 0);
            this.z = self.z - 1;
            this.free = true;
        };
        this.shadows = self.shadows + [o : Shadow];
    }
}

export class DirtWallFactory : WallFactory {
    mutating this once void initDirtWallFactory() {
        this.defined = new {
            for (string d in [
                "nw", "n", "ne", "w", "c", "e", "sw", "s", "se", "cnw", "cne",
                "cse", "csw"
            ]) {
                this += d;
            }
        };
    }

    override Object newWall(string blocking, set(string) corners) {
        set(string) defined = this.defined;
        return new MultiSpriteWall {
            this.initMultiSpriteWall(
                blocking, corners, Sprites : string, "dirt.", defined);
        };
    }

    set(string) defined;
}

export class COTAStage : GarmentStage {
    override mutating once void initMapping() {
        super();
        this.mapping["."] = new DirtWallFactory {
            this.initDirtWallFactory();
        };
    }
}
