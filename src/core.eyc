Copyright (c) 2020, 2021 Gregor Richards;

/* The core EYC library */

license (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

@prefix core;

/**
 * What other languages call "Object". Called "Root" in EYC, because Object
 * represents actual objects.
 */
export class Root {
    /**
     * Enforce this suggestion on this object, by ctx.
     */
    mutating void enforce(suggestion s, set(Root) ctx) {
        @js (s, ctx) { eyc.enforce(s, ctx); } : void;
    }

    /**
     * Get a random number (from this object).
     */
    num rand() {
        return @js () { return self.rand(); } : num;
    }

    /**
     * Get a random number in a range, lower-bound inclusive, upper-bound exclusive.
     */
    num randRange(num min, num max) {
        return Math.floor(this.rand() * (max-min) + min);
    }

    /**
     * Get the prefix of this object.
     */
    string prefix() {
        return @js () { return self.prefix; } : string;
    }

    /**
     * Get the ID of this object.
     */
    string id() {
        return @js () { return self.id; } : string;
    }
}

/**
 * Math functions.
 */
export class Math : Root {
    /**
     * Math.floor.
     * @static
     */
    num floor(num x) {
        return @js (x) { return Math.floor(x); } : num;
    }

    /**
     * Math.ceil.
     * @static
     */
    num ceil(num x) {
        return @js (x) { return Math.ceil(x); } : num;
    }

    /**
     * Math.trunc. Similar to Math.floor, but always truncates (i.e., goes
     * towards zero).
     * @static
     */
    num trunc(num x) {
        return @js (x) { return Math.trunc(x); } : num;
    }

    /**
     * Minimum of exactly two numbers.
     * @static
     */
    num min(num x, num y) {
        return @js (x, y) { return Math.min(x, y); } : num;
    }

    /**
     * Maximum of exactly two numbers.
     * @static
     */
    num max(num x, num y) {
        return @js (x, y) { return Math.max(x, y); } : num;
    }

    /**
     * Absolute value.
     * @static
     */
    num abs(num x) {
        if (x < 0)
            return -x;
        return x;
    }
}

/**
 * Object serialization functions.
 */
export class Serialize : Root {
    /**
     * Serialize this object.
     * @static
     */
    string serialize(Root x) {
        return @js (x) { return eyc.serialize(x); } : string;
    }

    /**
     * Deserialize an object.
     * @static
     */
    Root deserialize(string x) {
        return @js (x) {
            var ret = eyc.deserialize(x);
            if (typeof ret !== "object" || !ret.types)
                return eyc.nil;
            return ret;
        } : Root;
    }

    /**
     * Clone an object, by serializing and deserializing it.
     * @static
     */
    Root clone(Root x) {
        return this.deserialize(this.serialize(x));
    }
}

/**
 * JSON serialization/deserialization.
 */
export class JSON : Root {
    /**
     * Like JavaScript's JSON.parse. Returns a JSON object.
     * @static
     */
    JSON parse(string json) {
        JSON ret = new JSON;
        return @js (ret, json) {
            try {
                ret.json = JSON.parse(json);
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * JSON objects in EYC are wrappers for their actual values. This gets the
     * type of the outermost JSON part, one of "object", "array", "null",
     * "string", "number", "boolean", or "undefined".
     */
    string type() {
        return @js () {
            if (typeof self.json === "object") {
                if (self.json === null)
                    return "null";
                else if (self.json instanceof Array)
                    return "array";
                else
                    return "object";
            } else
                return typeof self.json;
        } : string;
    }

    /**
     * Gets the value of the given field of this JSON object, as another JSON
     * object.
     */
    JSON field(string field) {
        JSON ret = new JSON;
        return @js (ret, field) {
            try {
                ret.json = self.json[field];
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * Gets the element at the given index of this JSON array, as another JSON
     * object, or null if out of bounds.
     */
    JSON index(num idx) {
        JSON ret = new JSON;
        return @js (ret, idx) {
            try {
                ret.json = self.json[idx];
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * Interpret this value as a number. If it *is* a number, just returns its
     * value. Otherwise, coerces it to a number by JavaScript rules.
     */
    num asNum() {
        return @js () {
            return +self.json;
        } : num;
    }

    /**
     * Interpret this value as a string.
     */
    string asString() {
        return @js () {
            return "" + self.json;
        } : string;
    }

    /**
     * Interpret this value as a bool.
     */
    bool asBool() {
        return @js () {
            return !!self.json;
        } : bool;
    }

    // shorthand
    string t() { return this.type(); }
    JSON f(string f) { return this.field(f); }
    JSON i(num i) { return this.index(i); }
    num n() { return this.asNum(); }
    string s() { return this.asString(); }
    bool b() { return this.asBool(); }
}

/**
 * Debugging console.
 */
export class Console : Root {
    /**
     * Debug output, strings only.
     */
    void log(string x) {
        @js (x) { console.log(x); } : void;
    }
}

/**
 * Abstract class for programs, which can be initialized and then run.
 */
export class Program : Root {
    mutating void init() {}
}

/**
 * A basic one-shot "main" program, only used in testing.
 */
export class Basic : Program {
    mutating num main() {}
}

/**
 * A stage for a 2D game with object-object interactions, i.e., a normal EYC
 * program.
 */
export class Stage : Program {
    /**
     * Initialize the stage, mainly by connecting to the frontend.
     */
    override mutating void init() {
        this.extStage = @js (w=this.w, h=this.h, ex=this.ex) {
            return eyc.newStage(w, h, ex);
        } : string;
    }

    /**
     * Perform a tick of game actions.
     */
    mutating void tick() {
        array(suggestion) sa = new;

        // Step 1: Players
        for (Player p in this.players)
            sa += p.tick();
        for (suggestion s in sa)
            this.enforce(s, null);

        // Step 2: Actions
        this.tiles = new;
        sa = new;
        for reverse (Object o in this.objects) {
            sa += o.act();
            if (!o.free)
                this.addObjectMap(o);
        }
        for (suggestion s in sa)
            this.enforce(s, null);

        // Step 3: Determine interactions
        map(Object, array(tuple(Interaction, Interaction))) interactions = new;
        for (Object o1 in this.objects) {
            tuple(num, num, num, num) range = this.range(o1);
            num o1x1 = o1.x + o1.bbx1,
                o1x2 = o1.x + o1.bbx2,
                o1y1 = o1.y + o1.bby1,
                o1y2 = o1.y + o1.bby2;

            // Add this object to the interaction map
            if (!(o1 in interactions))
                interactions[o1] = new;
            array(tuple(Interaction, Interaction)) o1i = interactions[o1];

            // Look for objects we interact with
            for (num y = range[0]; y <= range[1]; y++) {
                for (num x = range[2]; x <= range[3]; x++) {
                    for (Object o2 in this.tiles[tuple(x, y)]) {
                        if (o1 is Object && o2 is Object && o2 > o1) {
                            num o2x1 = o2.x + o2.bbx1,
                                o2x2 = o2.x + o2.bbx2,
                                o2y1 = o2.y + o2.bby1,
                                o2y2 = o2.y + o2.bby2;

                            if ((o1.z == o2.z) &&
                                !(o1x2 <= o2x1 || o2x2 <= o1x1 ||
                                  o1y2 <= o2y1 || o2y2 <= o1y1)) {
                                // Add o2 to the interaction map
                                if (!(o2 in interactions))
                                    interactions[o2] = new;
                                array(tuple(Interaction, Interaction)) o2i = interactions[o2];

                                // Add the interaction pair to the arrays
                                Interaction i1 = new {
                                    this.init(o1, o2);
                                }, i2 = new {
                                    this.init(o2, o1);
                                };
                                o1i += tuple(i1, i2);
                                o2i += tuple(i2, i1);
                            }
                        }
                    }
                }
            }
        }

        // Step 4: Pre-interaction
        for (Object o, array(tuple(Interaction, Interaction)) i in interactions) {
            for (tuple(Interaction, Interaction) ti in i)
                ti[0].type = o.preinteract(ti[0]);
        }

        // Step 5: Interaction
        sa = new;
        for (Object o, array(tuple(Interaction, Interaction)) i in interactions)
            sa += o.interact(i);
        for reverse (suggestion s in sa)
            this.enforce(s, null);

        // Step 6: Reaction
        sa = new;
        for reverse (Object o in this.objects)
            sa += o.react();
        for (suggestion s in sa)
            this.enforce(s, null);
    }

    /**
     * Add an object to the stage.
     */
    mutating void addObject(Object o) {
        if (o.stage != null) {
            o.stage.remObject(o);
        }
        this.objects += o;
        o.addedToStage(this);
    }

    /**
     * Add an object to the internal map used to look up interactions. Used
     * whenever the object is moved.
     */
    mutating void addObjectMap(Object o) {
        tuple(num, num, num, num) range = this.range(o);
        for (num y = range[0]; y <= range[1]; y++) {
            for (num x = range[2]; x <= range[3]; x++) {
                tuple(num, num) xy = tuple(x, y);
                if (!(xy in this.tiles))
                    this.tiles[xy] = new;
                this.tiles[xy][o] = true;
            }
        }
    }

    /**
     * Remove an object from this stage.
     */
    mutating void remObject(Object o) {
        this.objects -= o;
        if (o.stage == this) {
            o.removedFromStage(this);
        }
    }

    /**
     * Utility: Get the range of map tiles an object occupies.
     */
    tuple(num, num, num, num) range(Object o) {
        return tuple (
            Math.floor((o.y+o.bby1)/8),
            Math.floor((o.y+o.bby2)/8),
            Math.floor((o.x+o.bbx1)/8),
            Math.floor((o.x+o.bbx2)/8)
        );
    }

    /**
     * Add a sprite to the frontend and get its frontend ID.
     */
    mutating string addSprite(string sprite, num x, num y, string ex) {
        return @js (extStage=this.extStage, sprite, x, y, ex) {
            return eyc.addSprite(extStage, sprite, x, y, ex);
        } : string;
    }

    /**
     * Remove a sprite from the frontend.
     */
    mutating string removeSprite(string sprite) {
        @js (extStage=this.extStage, sprite) {
            eyc.removeSprite(extStage, sprite);
        } : void;
    }

    /**
     * Move a sprite on the stage.
     */
    mutating void moveSprite(string sprite, num x, num y) {
        @js (extStage=this.extStage, sprite, x, y) {
            eyc.moveSprite(extStage, sprite, x, y);
        } : void;
    }

    /**
     * The width and height of the stage.
     */
    num w = 1920, h = 1080;

    /**
     * Extra properties for the stage.
     */
    string ex;

    /**
     * External stage reference for display.
     */
    string extStage;

    /**
     * Players.
     */
    array(Player) players;

    /**
     * The objects on this stage.
     */
    set(Object) objects;

    /**
     * Object locations in terms of tiles, to make collision calculations easier.
     */
    map(tuple(num, num), set(Object)) tiles;
}

/**
 * An object, in the sense of a thing in 2D space.
 */
export class Object : Root {
    /**
     * 1: Play (if this object is controlled by a player, it takes input).
     */
    suggestion takeInput(InputState input) {}

    /**
     * 2: Act. Normal, per-tick behavior.
     */
    mutating this suggestion act() {}

    /**
     * 3: Determine the kinds of interactions with other objects. e.g., may
     * decide to damage certain objects and ignore others.
     */
    string preinteract(Interaction interaction) {}

    /**
     * 4: Choose how to interact. Defines the results of interactions, before
     * they're actually applied.
     */
    suggestion interact(array(tuple(Interaction, Interaction)) interactions) {}

    /**
     * 5: React to interaction. This would be the time to, e.g., take damage or
     * be destroyed, or be enhanced in some way.
     */
    mutating this suggestion react() {}

    /**
     * Called when this object is added to a stage (usually for sprite
     * management)
     */
    mutating void addedToStage(Stage stage) {
        this.stage = stage;
    }

    /**
     * Called when this object is removed from a stage (usually for sprite
     * management)
     */
    mutating void removedFromStage(Stage stage) {
        this.stage = stage;
    }

    /**
     * Move this object in the X axis.
     */
    mutating this void moveX(num by) {
        this.x += by;
    }

    /**
     * Move this object in the Y axis.
     */
    mutating this void moveY(num by) {
        this.y += by;
    }

    /**
     * Objects aren't inherently clonable, but this helper method is provided
     * for clonable objects. Don't use it in non-clonable objects!
     */
    mutating this void cloneObject(Object other) {
        this.free = other.free;
        this.x = other.x;
        this.y = other.y;
        this.bbx1 = other.bbx1;
        this.bbx2 = other.bbx2;
        this.bby1 = other.bby1;
        this.bby2 = other.bby2;
    }

    /**
     * The stage to which this object belongs.
     */
    Stage stage;

    /**
     * A free object never interacts.
     */
    bool free;

    /**
     * Location of this object on the stage, and its bounding box.
     */
    num x, y, z, bbx1, bbx2, bby1, bby2;
}

/**
 * An object with a sprite.
 */
export class ObjectSprite : Object {
    /**
     * React by moving into place. FIXME: This should probably only fire if the
     * sprite actually moved.
     */
    override mutating this suggestion react() {
        /* FIXME
        return super() suggest {
            this.stage.moveSprite(
                this.dynamicSprite, this.x + this.spriteOffsetX,
                this.y + this.spriteOffsetY
            );
        };
        */
    }

    /**
     * When we're added to the stage, we add our sprite.
     */
    override mutating void addedToStage(Stage stage) {
        super(stage);
        this.dynamicSprite = stage.addSprite(
            this.staticSprite, this.x + this.spriteOffsetX,
            this.y + this.spriteOffsetY, this.spriteEx
        );
    }

    /**
     * When we're removed, we remove our sprite.
     */
    override mutating void removedFromStage(Stage stage) {
        super(stage);
        stage.removeSprite(this.dynamicSprite);
    }

    /**
     * ObjectSprites aren't inherently clonable, but this helper method is
     * provided for clonable ObjectSprites.
     */
    mutating this void cloneSprite(ObjectSprite other) {
        this.cloneObject(other);
        this.staticSprite = other.staticSprite;
        this.spriteOffsetX = other.spriteOffsetX;
        this.spriteOffsetY = other.spriteOffsetY;
    }

    // The (static) sprite to use to display this object
    string staticSprite;

    // Extra properties of the sprite
    string spriteEx;

    // The dynamic sprite currently used to display this object
    string dynamicSprite;

    // An optional (and usually unwanted) sprite offset
    num spriteOffsetX, spriteOffsetY;
}

/**
 * An interaction (or interaction in potentia) between two objects.
 */
export class Interaction : Root {
    /**
     * The object this interaction is being caused by and happening to. Every
     * interaction comes as a pair, with the other having from and to swapped.
     */
    Object from, to;

    /**
     * An arbitrary "type" of interaction, set by the from sprite.
     */
    string type;

    /**
     * Initialization.
     */
    mutating this void init(Object f, Object t) {
        this.from = f;
        this.to = t;
    }

    /**
     * Get the direction of this interaction, one of:
     * nw n ne
     *  w o  e
     * sw s se
     *
     * Note that this is the position of *from* relative to *to*, so if the
     * direction is 'n', then from is above to.
     */
    string dir(num corner) {
        num o1x1 = this.from.x + this.from.bbx1,
            o1x2 = this.from.x + this.from.bbx2,
            o1y1 = this.from.y + this.from.bby1,
            o1y2 = this.from.y + this.from.bby2,
            o2x1 = this.to.x + this.from.bbx1,
            o2x2 = this.to.x + this.to.bbx2,
            o2y1 = this.to.y + this.to.bby1,
            o2y2 = this.to.y + this.to.bby2;

        string rwe, rns, r;

        /* Find what portion overlaps in each axis (NOTE: If one entirely
         * overlaps the other, then this gives an incorrect result, but in a
         * harmless way) */
        num w = this.to.bbx2 - this.to.bbx1;
        num xOverlap = Math.min(Math.abs(o1x2 - o2x1), Math.abs(o2x2 - o1x1)) / w;
        num h = this.to.bby2 - this.to.bby1;
        num yOverlap = Math.min(Math.abs(o1y2 - o2y1), Math.abs(o2y2 - o1y1)) / h;

        // Find the direction of overlap in each axis
        if (o1x2 < o2x2) {
            if (o1x1 >= o2x1) {
                // Partial overlap. Is it close enough to a corner?
                if (o1x2 < o2x1 + w * corner)
                    rwe = "w";
                else if (o1x2 >= o2x1 + w - w * corner)
                    rwe = "e";
            } else
                rwe = "w";
        } else if (o1x1 >= o2x1)
            rwe = "e";
        if (o1y2 < o2y2) {
            if (o1y1 >= o2y1) {
                if (o1y2 < o2y2 + h * corner)
                    rns = "n";
                else if (o1y2 >= o2y1 + h - h * corner)
                    rns = "s";
            } else
                rns = "n";
        } else if (o1y1 >= o2y1)
            rns = "s";

        // Choose which parts we care about
        if ((xOverlap < corner && yOverlap < corner) ||
            (xOverlap >= corner && yOverlap >= corner)) {
            // Corner or huge overlap
            r = rns + rwe;
        } else if (xOverlap >= corner) {
            // Overlap in the X axis = touched in the Y axis
            r = rns;
        } else { // yOverlap >= corner
            // Overlap in the Y axis = touched in the X axis
            r = rwe;
        }

        // Now check if it was a central/all over overlap
        if (r == "")
            r = "o";

        return r;
    }

}

/**
 * A player. Really just used to interact with the frontend.
 */
export class Player : Root {
    /**
     * Each tick, if we're controlling an object, they take our input.
     */
    suggestion tick() {
        return this.controlling.takeInput(this.input);
    }

    Playing controlling;
    InputState input;
}

/**
 * Objects currently being played.
 */
export class Playing : Object {
    Player controlledBy;
}

/**
 * State of input, as booleans for whether each controller button is pressed as
 * well as a set of pressed buttons.
 */
export class InputState : Root {
    set(string) pressed;
    bool up, down, left, right, north, south, east, west;
}
