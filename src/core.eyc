Copyright (c) 2020, 2021 Gregor Richards;

/* The core EYC library */

license (
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. 
);

@prefix core;

export class Root {
    mutating void enforce(suggestion s, set(Root) ctx) {
        @js (s, ctx) { eyc.enforce(s, ctx); } : void;
    }

    num rand() {
        return @js () { return self.rand(); } : num;
    }

    num randRange(num min, num max) {
        return Math.floor(this.rand() * (max-min) + min);
    }

    string prefix() {
        return @js () { return self.prefix; } : string;
    }

    string id() {
        return @js () { return self.id; } : string;
    }
}

export class Math : Root {
    num floor(num x) {
        return @js (x) { return Math.floor(x); } : num;
    }

    num ceil(num x) {
        return @js (x) { return Math.ceil(x); } : num;
    }

    num trunc(num x) {
        return @js (x) { return Math.trunc(x); } : num;
    }

    num min(num x, num y) {
        return @js (x, y) { return Math.min(x, y); } : num;
    }

    num max(num x, num y) {
        return @js (x, y) { return Math.max(x, y); } : num;
    }

    num abs(num x) {
        if (x < 0)
            return -x;
        return x;
    }
}

export class Serialize : Root {
    string serialize(Root x) {
        return @js (x) { return eyc.serialize(x); } : string;
    }

    Root deserialize(string x) {
        return @js (x) {
            var ret = eyc.deserialize(x);
            if (typeof ret !== "object" || !ret.types)
                return eyc.nil;
            return ret;
        } : Root;
    }

    Root clone(Root x) {
        return this.deserialize(this.serialize(x));
    }
}

export class Console : Root {
    void log(string x) {
        @js (x) { console.log(x); } : void;
    }
}

// A basic one-shot "main" program (only used in testing)
export class Basic : Root {
    mutating void init() {}
    mutating num main() {}
}

// A stage for a 2D game with object-object interactions
export class Stage : Root {
    mutating void init() {
        this.extStage = @js (w=this.w, h=this.h, ex=this.ex) {
            return eyc.newStage(w, h, ex);
        } : string;
    }

    // Perform a tick of game actions
    mutating void tick() {
        array(suggestion) sa = new;

        // Step 1: Players
        for (Player p in this.players)
            sa += p.tick();
        for (suggestion s in sa)
            this.enforce(s, null);

        // Step 2: Actions
        this.tiles = new;
        sa = new;
        for reverse (Object o in this.objects) {
            sa += o.act();
            if (!o.free)
                this.addObjectMap(o);
        }
        for (suggestion s in sa)
            this.enforce(s, null);

        // Step 3: Determine interactions
        map(Object, array(tuple(Interaction, Interaction))) interactions = new;
        for (Object o1 in this.objects) {
            tuple(num, num, num, num) range = this.range(o1);
            num o1x1 = o1.x + o1.bbx1,
                o1x2 = o1.x + o1.bbx2,
                o1y1 = o1.y + o1.bby1,
                o1y2 = o1.y + o1.bby2;

            // Add this object to the interaction map
            if (!(o1 in interactions))
                interactions[o1] = new;
            array(tuple(Interaction, Interaction)) o1i = interactions[o1];

            // Look for objects we interact with
            for (num y = range[0]; y <= range[1]; y++) {
                for (num x = range[2]; x <= range[3]; x++) {
                    for (Object o2 in this.tiles[tuple(x, y)]) {
                        if (o1 is Object && o2 is Object && o2 > o1) {
                            num o2x1 = o2.x + o2.bbx1,
                                o2x2 = o2.x + o2.bbx2,
                                o2y1 = o2.y + o2.bby1,
                                o2y2 = o2.y + o2.bby2;

                            if ((o1.z == o2.z) &&
                                !(o1x2 <= o2x1 || o2x2 <= o1x1 ||
                                  o1y2 <= o2y1 || o2y2 <= o1y1)) {
                                // Add o2 to the interaction map
                                if (!(o2 in interactions))
                                    interactions[o2] = new;
                                array(tuple(Interaction, Interaction)) o2i = interactions[o2];

                                // Add the interaction pair to the arrays
                                Interaction i1 = new {
                                    this.init(o1, o2);
                                }, i2 = new {
                                    this.init(o2, o1);
                                };
                                o1i += tuple(i1, i2);
                                o2i += tuple(i2, i1);
                            }
                        }
                    }
                }
            }
        }

        // Step 4: Pre-interaction
        for (Object o, array(tuple(Interaction, Interaction)) i in interactions) {
            for (tuple(Interaction, Interaction) ti in i)
                ti[0].type = o.preinteract(ti[0]);
        }

        // Step 5: Interaction
        sa = new;
        for (Object o, array(tuple(Interaction, Interaction)) i in interactions)
            sa += o.interact(i);
        for reverse (suggestion s in sa)
            this.enforce(s, null);

        // Step 6: Reaction
        sa = new;
        for reverse (Object o in this.objects)
            sa += o.react();
        for (suggestion s in sa)
            this.enforce(s, null);
    }

    // Add an object to the stage
    mutating void addObject(Object o) {
        if (o.stage != null) {
            o.stage.remObject(o);
        }
        this.objects += o;
        o.addedToStage(this);
    }

    // Add an object to the internal map used to look up interactions
    mutating void addObjectMap(Object o) {
        tuple(num, num, num, num) range = this.range(o);
        for (num y = range[0]; y <= range[1]; y++) {
            for (num x = range[2]; x <= range[3]; x++) {
                tuple(num, num) xy = tuple(x, y);
                if (!(xy in this.tiles))
                    this.tiles[xy] = new;
                this.tiles[xy][o] = true;
            }
        }
    }

    // Remove an object from this stage
    mutating void remObject(Object o) {
        this.objects -= o;
        if (o.stage == this) {
            o.removedFromStage(this);
        }
    }

    // Utility: The range of map tiles an object occupies
    tuple(num, num, num, num) range(Object o) {
        return tuple (
            Math.floor((o.y+o.bby1)/8),
            Math.floor((o.y+o.bby2)/8),
            Math.floor((o.x+o.bbx1)/8),
            Math.floor((o.x+o.bbx2)/8)
        );
    }

    // Create a sprite
    mutating string addSprite(string sprite, num x, num y, string ex) {
        return @js (extStage=this.extStage, sprite, x, y, ex) {
            return eyc.addSprite(extStage, sprite, x, y, ex);
        } : string;
    }

    // Remove a sprite
    mutating string removeSprite(string sprite) {
        @js (extStage=this.extStage, sprite) {
            eyc.removeSprite(extStage, sprite);
        } : void;
    }

    // Move a sprite on the stage
    mutating void moveSprite(string sprite, num x, num y) {
        @js (extStage=this.extStage, sprite, x, y) {
            eyc.moveSprite(extStage, sprite, x, y);
        } : void;
    }

    // The width and height of the stage
    num w = 1920, h = 1080;

    // Extra properties for the stage
    string ex;

    // External stage reference for display
    string extStage;

    // Players
    array(Player) players;

    // The objects on this stage
    set(Object) objects;

    // And their locations, tiled
    map(tuple(num, num), set(Object)) tiles;
}

// An object, in the sense of a thing in 2D space
export class Object : Root {
    // 1: Play
    suggestion takeInput(InputState input) {}

    // 2: Act
    mutating this suggestion act() {}

    // 3: Determine the kinds of interactions with other objects
    string preinteract(Interaction interaction) {}

    // 4: Choose how to interact
    suggestion interact(array(tuple(Interaction, Interaction)) interactions) {}

    // 5: React to interaction
    mutating this suggestion react() {}

    /* Called when this object is added to a stage (usually for sprite
     * management) */
    mutating void addedToStage(Stage stage) {
        this.stage = stage;
    }

    /* Called when this object is removed from a stage (usually for sprite
     * management) */
    mutating void removedFromStage(Stage stage) {
        this.stage = stage;
    }

    // Move this object in X
    mutating this void moveX(num by) {
        this.x += by;
    }

    // Move this object in Y
    mutating this void moveY(num by) {
        this.y += by;
    }

    /* Objects aren't inherently clonable, but this helper method is provided
     * for clonable objects */
    mutating this void cloneObject(Object other) {
        this.free = other.free;
        this.x = other.x;
        this.y = other.y;
        this.bbx1 = other.bbx1;
        this.bbx2 = other.bbx2;
        this.bby1 = other.bby1;
        this.bby2 = other.bby2;
    }

    // The stage to which this object belongs
    Stage stage;

    // A free object never interacts
    bool free;

    num x, y, z, bbx1, bbx2, bby1, bby2;
}

// An object with a sprite
export class ObjectSprite : Object {
    override mutating this suggestion react() {
        return super() suggest {
            this.stage.moveSprite(this.dynamicSprite, this.x + this.spriteOffsetX, this.y + this.spriteOffsetY);
        };
    }

    override mutating void addedToStage(Stage stage) {
        super(stage);
        this.dynamicSprite = stage.addSprite(this.staticSprite, this.x + this.spriteOffsetX, this.y + this.spriteOffsetY, this.spriteEx);
    }

    override mutating void removedFromStage(Stage stage) {
        super(stage);
        stage.removeSprite(this.dynamicSprite);
    }

    /* ObjectSprites aren't inherently clonable, but this helper method is
     * provided for clonable ObjectSprites */
    mutating this void cloneSprite(ObjectSprite other) {
        this.cloneObject(other);
        this.staticSprite = other.staticSprite;
        this.spriteOffsetX = other.spriteOffsetX;
        this.spriteOffsetY = other.spriteOffsetY;
    }

    // The (static) sprite to use to display this object
    string staticSprite;

    // Extra properties of the sprite
    string spriteEx;

    // The dynamic sprite currently used to display this object
    string dynamicSprite;

    // An optional (and usually unwanted) sprite offset
    num spriteOffsetX, spriteOffsetY;
}

export class Interaction : Root {
    // Every interaction comes as a pair, with swapped from-to
    Object from, to;

    // Set by the *from* object
    string type;

    // Initialize
    mutating this void init(Object f, Object t) {
        this.from = f;
        this.to = t;
    }

    /* Get the direction of this interaction, one of:
     * nw n ne
     *  w o  e
     * sw s se
     *
     * Note that this is the position of *from* relative to *to*, so if the
     * direction is 'n', then from is above to. */
    string dir(num corner) {
        num o1x1 = this.from.x + this.from.bbx1,
            o1x2 = this.from.x + this.from.bbx2,
            o1y1 = this.from.y + this.from.bby1,
            o1y2 = this.from.y + this.from.bby2,
            o2x1 = this.to.x + this.from.bbx1,
            o2x2 = this.to.x + this.to.bbx2,
            o2y1 = this.to.y + this.to.bby2,
            o2y2 = this.to.y + this.to.bby2;

        string rwe, rns, r;

        /* Find what portion overlaps in each axis (NOTE: If one entirely
         * overlaps the other, then this gives an incorrect result, but in a
         * harmless way) */
        num w = this.to.bbx2 - this.to.bbx1;
        num xOverlap = Math.min(Math.abs(o1x2 - o2x1), Math.abs(o2x2 - o1x1)) / w;
        num h = this.to.bby2 - this.to.bby1;
        num yOverlap = Math.min(Math.abs(o1y2 - o2y1), Math.abs(o2y2 - o1y1)) / h;

        // Find the direction of overlap in each axis
        if (o1x2 < o2x2) {
            if (o1x1 >= o2x1) {
                // Partial overlap. Is it close enough to a corner?
                if (o1x2 < o2x1 + w * corner)
                    rwe = "w";
                else if (o1x2 >= o2x1 + w - w * corner)
                    rwe = "e";
            } else
                rwe = "w";
        } else if (o1x1 >= o2x1)
            rwe = "e";
        if (o1y2 < o2y2) {
            if (o1y1 >= o2y1) {
                if (o1y2 < o2y2 + h * corner)
                    rns = "n";
                else if (o1y2 >= o2y1 + h - h * corner)
                    rns = "s";
            } else
                rns = "n";
        } else if (o1y1 >= o2y1)
            rns = "s";

        // Choose which parts we care about
        if ((xOverlap < corner && yOverlap < corner) ||
            (xOverlap >= corner && yOverlap >= corner)) {
            // Corner or huge overlap
            r = rns + rwe;
        } else if (xOverlap >= corner) {
            // Overlap in the X axis = touched in the Y axis
            r = rns;
        } else { // yOverlap >= corner
            // Overlap in the Y axis = touched in the X axis
            r = rwe;
        }

        // Now check if it was a central/all over overlap
        if (r == "")
            r = "o";

        return r;
    }

}

export class Player : Root {
    suggestion tick() {
        return this.controlling.takeInput(this.input);
    }

    Playing controlling;
    InputState input;
}

export class Playing : Object {
    Player controlledBy;
}

export class InputState : Root {
    bool up, down, left, right, north, south, east, west;
}
