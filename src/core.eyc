Copyright (c) 2020-2022 Gregor Richards;

/* The core EYC library */

license ISC (
Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.
);

@prefix core;

/**
 * What other languages call "Object". Called "Root" in EYC, because Object
 * represents actual objects.
 */
export class Root {
    /**
     * Enforce this suggestion on this object, by ctx.
     */
    mutating void enforce(suggestion s, set(Root) ctx) {
        @js (s, ctx) { eyc.enforce(s, ctx); } : void;
    }

    /**
     * Get the current timestamp (attainable from ANY object).
     */
    num ts() {
        return @js () { return eyc.ts; } : num;
    }

    /**
     * Get a random number (from this object).
     */
    num rand() {
        return @js () { return self.rand(); } : num;
    }

    /**
     * Get a random number in a range, lower-bound inclusive, upper-bound exclusive.
     */
    num randRange(num min, num max) {
        return Math.floor(this.rand() * (max-min) + min);
    }

    /**
     * Get the prefix of this object.
     */
    string prefix() {
        return @js () { return self.prefix; } : string;
    }

    /**
     * Get the ID of this object.
     */
    string id() {
        return @js () { return self.id; } : string;
    }
}

/**
 * Math functions.
 */
export class Math : Root {
    /**
     * Math.floor.
     * @static
     */
    num floor(num x) {
        return @js (x) { return Math.floor(x); } : num;
    }

    /**
     * Math.ceil.
     * @static
     */
    num ceil(num x) {
        return @js (x) { return Math.ceil(x); } : num;
    }

    /**
     * Math.trunc. Similar to Math.floor, but always truncates (i.e., goes
     * towards zero).
     * @static
     */
    num trunc(num x) {
        return @js (x) { return Math.trunc(x); } : num;
    }

    /**
     * Minimum of exactly two numbers.
     * @static
     */
    num min(num x, num y) {
        return @js (x, y) { return Math.min(x, y); } : num;
    }

    /**
     * Maximum of exactly two numbers.
     * @static
     */
    num max(num x, num y) {
        return @js (x, y) { return Math.max(x, y); } : num;
    }

    /**
     * Minimum of two numbers in absolute terms. Prefer the given sign if
     * their absolute value is equal.
     * @static
     */
    num minAbs(num x, num y, num sign) {
        if (x >= 0 && y >= 0)
            return Math.min(x, y);
        else if (x <= 0 && y <= 0)
            return Math.max(x, y);
        else
            return Math.minAbsPrime(x, y, sign);
    }

    /**
     * Helper function for minAbs.
     * @private
     */
    num minAbsPrime(num x, num y, num sign) {
        if (x >= 0) {
            num ny = -y;
            if (x < ny)
                return x;
            else if (ny < x)
                return y;
            else if (sign >= 0)
                return x;
            else
                return y;
        } else
            return Math.minAbsPrime(y, x, sign);
    }

    /**
     * Maximum of two numbers in absolute terms. Prefer the given sign if
     * their absolute value is equal.
     * @static
     */
    num maxAbs(num x, num y, num sign) {
        if (x >= 0 && y >= 0)
            return Math.max(x, y);
        else if (x <= 0 && y <= 0)
            return Math.min(x, y);
        else
            return Math.maxAbsPrime(x, y, sign);
    }

    /**
     * Helper function for maxAbs.
     * @private
     */
    num maxAbsPrime(num x, num y, num sign) {
        if (x >= 0) {
            num ny = -y;
            if (x > ny)
                return x;
            else if (ny > x)
                return y;
            else if (sign >= 0)
                return x;
            else
                return y;
        } else
            return Math.maxAbsPrime(y, x, sign);
    }

    /**
     * Absolute value.
     * @static
     */
    num abs(num x) {
        if (x < 0)
            return -x;
        return x;
    }

    /**
     * Sign.
     * @static
     */
    num sign(num x) {
        if (x > 0)
            return 1;
        else if (x < 0)
            return -1;
        return x;
    }
}

/**
 * Object serialization functions.
 */
export class Serialize : Root {
    /**
     * Serialize this object.
     * @static
     */
    string serialize(Root x) {
        return @js (x) { return eyc.serialize(x); } : string;
    }

    /**
     * Deserialize an object.
     * @static
     */
    Root deserialize(string x) {
        return @js (x) {
            var ret = eyc.deserialize(x);
            if (typeof ret !== "object" || !ret.types)
                return eyc.nil;
            return ret;
        } : Root;
    }

    /**
     * Clone an object, by serializing and deserializing it.
     * @static
     */
    Root clone(Root x) {
        return this.deserialize(this.serialize(x));
    }
}

/**
 * JSON serialization/deserialization.
 */
export class JSON : Root {
    /**
     * Like JavaScript's JSON.parse. Returns a JSON object.
     * @static
     */
    JSON parse(string json) {
        JSON ret = new JSON;
        return @js (ret, json) {
            try {
                ret.json = JSON.parse(json);
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * JSON objects in EYC are wrappers for their actual values. This gets the
     * type of the outermost JSON part, one of "object", "array", "null",
     * "string", "number", "boolean", or "undefined".
     */
    string type() {
        return @js () {
            if (typeof self.json === "object") {
                if (self.json === null)
                    return "null";
                else if (self.json instanceof Array)
                    return "array";
                else
                    return "object";
            } else
                return typeof self.json;
        } : string;
    }

    /**
     * Gets the value of the given field of this JSON object, as another JSON
     * object.
     */
    JSON field(string field) {
        JSON ret = new JSON;
        return @js (ret, field) {
            try {
                ret.json = self.json[field];
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * Gets the element at the given index of this JSON array, as another JSON
     * object, or null if out of bounds.
     */
    JSON index(num idx) {
        JSON ret = new JSON;
        return @js (ret, idx) {
            try {
                ret.json = self.json[idx];
            } catch (ex) {
                return eyc.nil;
            }
            return ret;
        } : JSON;
    }

    /**
     * Interpret this value as a number. If it *is* a number, just returns its
     * value. Otherwise, coerces it to a number by JavaScript rules.
     */
    num asNum() {
        return @js () {
            return +self.json;
        } : num;
    }

    /**
     * Interpret this value as a string.
     */
    string asString() {
        return @js () {
            return "" + self.json;
        } : string;
    }

    /**
     * Interpret this value as a bool.
     */
    bool asBool() {
        return @js () {
            return !!self.json;
        } : bool;
    }

    // shorthand
    string t() { return this.type(); }
    JSON f(string f) { return this.field(f); }
    JSON i(num i) { return this.index(i); }
    num n() { return this.asNum(); }
    string s() { return this.asString(); }
    bool b() { return this.asBool(); }
}

/**
 * Debugging console.
 */
export class Console : Root {
    /**
     * Debug output, strings only.
     */
    void log(string x) {
        @js (x) { console.log(x); } : void;
    }
}

/**
 * Abstract class for programs, which can be initialized and then run. The usual
 * convention in EYC is not to override init, but in this case, *do override
 * init*.
 */
export class Program : Root {
    mutating once void init() {}
}

/**
 * A basic one-shot "main" program, only used in testing.
 */
export class Basic : Program {
    mutating num main() {}
}

/**
 * A stage for a 2D game with frame ticks.
 */
export class Stage : Program {
    /**
     * Initialize the stage, mainly by connecting to the frontend.
     */
    override mutating once void init() {
        this.extStage = @js (dw=this.dw, dh=this.dh, ex=this.ex) {
            return eyc.newStage(dw, dh, ex);
        } : string;
    }

    /**
     * Get input state from players.
     */
    mutating void input(array(string) input) {}

    /**
     * Perform a tick of game actions.
     */
    mutating void tick() {}

    /**
     * Add a sprite to the frontend and get its frontend ID.
     */
    mutating string addSprite(
        tuple(string, string) sprite, num x, num y, num z, string ex
    ) {
        return @js (extStage=this.extStage, sprite, x, y, z, ex) {
            return eyc.addSprite(extStage, sprite[0], sprite[1], x, y, z, ex);
        } : string;
    }

    /**
     * Remove a sprite from the frontend.
     */
    mutating string removeSprite(string sprite) {
        @js (extStage=this.extStage, sprite) {
            eyc.removeSprite(extStage, sprite);
        } : void;
    }

    /**
     * Update the displayed (static) sprite for a (dynamic) sprite in the
     * frontend.
     */
    mutating string updateSprite(
        string dynamic, tuple(string, string) staticS
    ) {
        @js (extStage=this.extStage, dynamic, staticS) {
            eyc.updateSprite(extStage, dynamic, staticS[0], staticS[1]);
        } : void;
    }

    /**
     * Move a sprite on the stage.
     */
    mutating void moveSprite(string sprite, num x, num y) {
        @js (extStage=this.extStage, sprite, x, y) {
            eyc.moveSprite(extStage, sprite, x, y);
        } : void;
    }

    /**
     * Mirror (unmirror) a sprite.
     */
    mutating void mirrorSprite(string sprite, bool mirror, bool vertical) {
        @js (extStage=this.extStage, sprite, mirror, vertical) {
            eyc.mirrorSprite(extStage, sprite, mirror, vertical);
        } : void;
    }

    /**
     * The display width and height of the stage in tiles.
     */
    num dw = 32, dh = 18;

    /**
     * Extra properties for the stage.
     */
    string ex;

    /**
     * External stage reference for display.
     */
    string extStage;
}
